{"version":3,"sources":["components/Jumbotron/index.js","components/Nav/index.js","components/Input/index.js","components/Button/index.js","components/BookList/index.js","components/Results/index.js","utils/API.js","components/Grid/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","className","Nav","props","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","currentState","onClick","handlePageChange","Input","Button","children","join","BookListItem","key","title","link","pageState","data-id","src","thumbnail","alt","authors","description","Results","console","log","books","length","map","data","_id","image","searchedBooks","volumeInfo","infoLink","imageLinks","industryIdentifiers","identifier","substring","bookSave","handleBookSave","getBooks","titleToSearch","searchQuery","axios","get","returnSavedBooks","deleteBook","idToDelete","delete","Container","fluid","Row","Col","size","split","App","state","bookSearch","page","userSearchMessage","event","preventDefault","targetPage","target","innerText","setState","handleInputChange","value","displayToUserSearchMessage","message","returnAllSavedBooks","API","then","handleDeleteBookById","handleBookSaveById","idToSave","componentDidMount","handleFormSubmit","res","catch","err","this","name","onChange","placeholder","handleBookDelete","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6efa9427.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Jumbotron function\nfunction Jumbotron() {\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron text-center\">\n        {/* Title Text */}\n        <h1>(React) Google Books Search</h1>\n        <p className=\"lead\">Search for and Save Books of Interest</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Nav bar return function\nfunction Nav(props) {\n  return (\n    // Nav Bar\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Google Books\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li\n            className={\n              // Make this the active link class if detected in state\n              props.currentState === \"Search\"\n                ? \"nav-item active\"\n                : // Else, set to empty div\n                  \"nav-item\"\n            }\n            onClick={props.handlePageChange}\n          >\n            <a className=\"nav-link\" href=\"/\">\n              Search\n              {/* If the current state is Search, set this to current for reader */}\n              {props.currentState === \"Search\" ? (\n                <span className=\"sr-only\">(current)</span>\n              ) : (\n                // Else, set to empty div\n                <></>\n              )}\n            </a>\n          </li>\n          <li\n            className={\n              // Make this the active link class if detected in state\n              props.currentState === \"Search\"\n                ? \"nav-item active\"\n                : // Else, set to empty div\n                  \"nav-item\"\n            }\n            onClick={props.handlePageChange}\n          >\n            <a className=\"nav-link\" href=\"/\">\n              Saved\n              {/* If the current state is Search, set this to current for reader */}\n              {props.currentState === \"Saved\" ? (\n                <span className=\"sr-only\">(current)</span>\n              ) : (\n                // Else, set to empty div\n                <></>\n              )}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n// Function to create input item\nfunction Input(props) {\n  return (\n    // Input item\n    <div className=\"input-group input-group-lg\">\n      <input className=\"form-control\" type=\"text\" {...props} />\n    </div>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, and building the button using them\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    // Build button using destructured props\n    <button\n      onClick={onClick}\n      className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}\n    >\n      {children}\n    </button>\n  );\n}\n\n// Export\nexport default Button;\n","import React from \"react\";\nimport(\"./style.css\");\n// import Thumbnail from \"../Thumbnail\";\n\n// BookListItem renders a bootstrap list item containing data from the recipe api call\nexport function BookListItem(props) {\n  return (\n    // Build card\n    <div key={props.id} className=\"card\">\n      <div className=\"card-header\">\n        <span>{props.title}</span>\n\n        {/* Start button section of header */}\n        <div>\n          <a href={props.link} className=\"btn btn-primary\">\n            View\n          </a>\n\n          {/* If the page state is saved, then display delete button. Else, display save button */}\n          {props.pageState === \"Saved\" ? (\n            <a href=\"/\" className=\"btn btn-primary\" data-id={props.id}>\n              Delete\n            </a>\n          ) : (\n            <a href=\"/\" className=\"btn btn-primary\" data-id={props.id}>\n              Save\n            </a>\n          )}\n        </div>\n      </div>\n\n      {/* Card body */}\n      <div key={props.id} className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            {/* Book image thumbnail */}\n            <img\n              src={props.thumbnail}\n              className=\"card-img\"\n              alt={props.title}\n            ></img>\n          </div>\n          {/* Book details */}\n          <div className=\"col-md-8\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">\n                {props.title + \" by \" + props.authors}\n              </h5>\n              <p className=\"card-text\">{props.description}</p>\n              <p className=\"card-text\">\n                <small className=\"text-muted\">ISBN: </small>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BookListItem } from \"../BookList\";\nimport(\"./style.css\");\n// import Thumbnail from \"../Thumbnail\";\n// import { Container, Row, Col } from \"../Grid\";\n\n// Results renders Saved books (MongoDB) or searched books (Google Books)\nexport function Results(props) {\n  console.log(\"Results props: \", props);\n  if (props.pageState === \"Saved\") {\n    return (\n      <div>\n        <h3>Saved Books</h3>\n\n        {/* If state variable books has length  */}\n        {props.books.length ? (\n          // Iterate through books array\n          props.books.map(function(data) {\n            console.log(\"In props book loop\");\n            return (\n              // Create a book list item\n              <BookListItem\n                key={data._id}\n                id={data._id}\n                title={data.title}\n                thumbnail={data.image}\n                authors={data.authors}\n                description={data.description}\n                link={data.link}\n                pageState={props.pageState}\n              />\n            );\n          })\n        ) : (\n          // Else, provide note that there are no books\n          <h3 className=\"text-center\">No books available!</h3>\n        )}\n      </div>\n    );\n  } else {\n    /* Else if pagestate is something else */\n    return (\n      <div>\n        <h3>Search Results</h3>\n\n        {/* If state variable books has length  */}\n        {props.searchedBooks.length ? (\n          // Iterate through books array\n          props.searchedBooks.map(function(data) {\n            console.log(data.volumeInfo);\n            // Extract required information\n            const { title, infoLink, description } = data.volumeInfo;\n            const thumbnail = data.volumeInfo.imageLinks.thumbnail || \"\";\n            console.log(data.volumeInfo.industryIdentifiers);\n            const identifier = data.id || \"Unknown\";\n            // Join array of authors with commas separating and remove last comma\n            const authors = data.volumeInfo.authors\n              ? data.volumeInfo.authors.join(\", \").substring(0, -2)\n              : \"Anonymous\";\n\n            return (\n              // Create a book list item\n              <BookListItem\n                key={identifier}\n                title={title}\n                thumbnail={thumbnail}\n                authors={authors}\n                description={description}\n                id={identifier}\n                pageState={props.pageState}\n                link={infoLink}\n                bookSave={props.handleBookSave()}\n              />\n            );\n          })\n        ) : (\n          // Else, provide note that there are no books\n          <></>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import axios from \"axios\";\n\n// Export an object containing API call functions\nexport default {\n  // Function to get book results from Google Books\n  getBooks: function(titleToSearch) {\n    let searchQuery = \"/api/getBooks/\" + titleToSearch;\n    // Return promise to resolve\n    return axios.get(searchQuery);\n  },\n\n  // Return all saved books\n  returnSavedBooks: function() {\n    return axios.get(\"/api/books/savedBooks\");\n  },\n\n  // Delete a book using its id\n  deleteBook: function(idToDelete) {\n    return axios.delete(\"/api/books/savedBooks/\" + idToDelete);\n  }\n};\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// A custom Row component that uses boostrap classes that can be toggled fluid (t/f)\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// Col component that allows toggling bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport Results from \"./components/Results\";\nimport API from \"./utils/API\";\n// import { BookListItem } from \"./components/BookList\";\nimport { Container, Row, Col } from \"./components/Grid\";\n\n// Create class App for overall application\nclass App extends Component {\n  // State\n  state = {\n    // Stored books\n    books: [],\n    // Current Search\n    bookSearch: \"\",\n    // Current page\n    page: \"Saved\",\n    // Current Google Books Search Results\n    searchedBooks: [],\n    // Message to display for user search status\n    userSearchMessage: \"\"\n  };\n\n  // Changes state of page when click detected\n  handlePageChange = event => {\n    event.preventDefault();\n    // Grab clicked item's inner text\n    const targetPage = event.target.innerText;\n    console.log(event.target);\n\n    console.log(\"setting state \\ninnertext\" + targetPage);\n    // Set state variable page to new page values\n    this.setState({\n      page: targetPage\n    });\n  };\n\n  // As search input is changing\n  handleInputChange = event => {\n    // Destructure the value property off of event.target\n    const { value } = event.target;\n    // Update the bookSearch state\n    this.setState({\n      bookSearch: value\n    });\n  };\n\n  // Function to handle message for user's search status\n  displayToUserSearchMessage = message => {\n    // Set state user search message value to new message\n    this.setState({\n      userSearchMessage: message\n    });\n  };\n\n  // Make API call and return TODO\n  returnAllSavedBooks = () => {\n    // Make call using API\n    API.returnSavedBooks().then(data => {\n      console.log(data.data);\n      this.setState({\n        books: data.data\n      });\n    });\n  };\n\n  // Delete book using id TODO\n  handleDeleteBookById = event => {\n    let idToDelete = event.target;\n    console.log(\"Attempting delete\", idToDelete);\n  };\n\n  handleBookSaveById = event => {\n    let idToSave = event.target;\n    console.log(\"Attempting save\", idToSave);\n  };\n\n  // Once mounted, populate with saved books\n  componentDidMount = () => {\n    this.returnAllSavedBooks();\n  };\n\n  // Handle when the form is submitted: perform a search\n  handleFormSubmit = event => {\n    // When the form is submitted, prevent its default behavior, get recipes update the recipes state\n    console.log(\"Form submitted!\");\n    console.log(\"State:\", this.state);\n    this.displayToUserSearchMessage(\"Searching...\");\n\n    event.preventDefault();\n\n    // Use API to get books\n    API.getBooks(this.state.bookSearch)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          searchedBooks: res.data,\n          userSearchMessage: \"\"\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          userSearchMessage: \"Search Failed\"\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* Nav */}\n        <Nav handlePageChange={this.handlePageChange} />\n        {/* Jumbotron */}\n        <Jumbotron />\n\n        {/* booksearch container */}\n        <Container>\n          {/* If page state is at search, then display search form */}\n          {this.state.page === \"Search\" ? (\n            <Row>\n              <Col size=\"md-12\">\n                <form>\n                  <Container>\n                    <Row>\n                      <Col size=\"xs-9 sm-10\">\n                        {/* Display user search message if searching */}\n                        <span>{this.state.userSearchMessage}</span>\n                        <Input\n                          name=\"bookSearch\"\n                          value={this.state.bookSearch}\n                          onChange={this.handleInputChange}\n                          placeholder=\"Search For a Book\"\n                        />\n                      </Col>\n                      <Col size=\"xs-3 sm-2\">\n                        {/* Submit Search button */}\n                        <Button\n                          onClick={this.handleFormSubmit}\n                          type=\"success\"\n                          className=\"input-lg\"\n                        >\n                          Search\n                        </Button>\n                      </Col>\n                    </Row>\n                  </Container>\n                </form>\n              </Col>\n            </Row>\n          ) : (\n            // Else return an empty div\n            <></>\n          )}\n\n          {/* Book Results: Show saved books if on saved page, else show search results */}\n\n          <Row>\n            <Col size=\"12\">\n              <Container>\n                {/* Test button to return all saved books */}\n                <Button\n                  onClick={this.returnAllSavedBooks}\n                  type=\"success\"\n                  className=\"input-lg\"\n                >\n                  Update\n                </Button>\n                <Results\n                  pageState={this.state.page}\n                  books={this.state.books}\n                  searchedBooks={this.state.searchedBooks}\n                  handleBookDelete={this.handleDeleteBookById}\n                  handleBookSave={this.handleBookSaveById}\n                />\n              </Container>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}