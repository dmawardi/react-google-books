{"version":3,"sources":["components/Jumbotron/index.js","components/Nav/index.js","components/Input/index.js","components/Button/index.js","components/BookList/index.js","components/Results/index.js","utils/API.js","components/Grid/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Nav","props","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","currentState","onClick","handlePageChange","Fragment","Input","Object","assign","Button","_ref","_ref$type","children","concat","join","BookListItem","key","identifier","title","infoLink","class","data-id","pageState","src","thumbnail","alt","authors","description","__webpack_require__","e","then","t","bind","Results","console","log","books","length","this","state","map","data","ingredients","searchedBooks","volumeInfo","_data$volumeInfo","imageLinks","industryIdentifiers","identifer","substring","API","getBooks","titleToSearch","searchQuery","axios","get","returnSavedBooks","deleteBook","idToDelete","delete","Container","fluid","Row","_ref2","Col","_ref3","size","split","App","bookSearch","page","userSearchMessage","event","preventDefault","targetPage","target","innerText","_this","setState","handleInputChange","value","displayToUserSearchMessage","message","returnAllSavedBooks","deleteBookById","componentDidMount","handleFormSubmit","res","catch","err","components_Nav","components_Jumbotron","components_Input","name","onChange","placeholder","components_Button","components_Results","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.66adf7d9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron text-center\">\n        <h1>(React) Google Books Search</h1>\n        <p className=\"lead\">Search for and Save Books of Interest</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n// import { PromiseProvider } from \"mongoose\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Google Books\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li\n            className={\n              // Make this the active link class if detected in state\n              props.currentState === \"Search\"\n                ? \"nav-item active\"\n                : // Else, set to empty div\n                  \"nav-item\"\n            }\n            onClick={props.handlePageChange}\n          >\n            <a className=\"nav-link\" href=\"/\">\n              Search\n              {/* If the current state is Search, set this to current for reader */}\n              {props.currentState === \"Search\" ? (\n                <span className=\"sr-only\">(current)</span>\n              ) : (\n                // Else, set to empty div\n                <></>\n              )}\n            </a>\n          </li>\n          <li\n            className={\n              // Make this the active link class if detected in state\n              props.currentState === \"Search\"\n                ? \"nav-item active\"\n                : // Else, set to empty div\n                  \"nav-item\"\n            }\n            onClick={props.handlePageChange}\n          >\n            <a className=\"nav-link\" href=\"/\">\n              Saved\n              {/* If the current state is Search, set this to current for reader */}\n              {props.currentState === \"Saved\" ? (\n                <span className=\"sr-only\">(current)</span>\n              ) : (\n                // Else, set to empty div\n                <></>\n              )}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n// This component lets us use a bootstrap input element without worrying about class names\n// or manually wrapping the input with a form-group div\n// All of the props passed to this component are spread onto the input element\nfunction Input(props) {\n  return (\n    <div className=\"input-group input-group-lg\">\n      <input className=\"form-control\" type=\"text\" {...props} />\n    </div>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    <button onClick={onClick} className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\nimport(\"./style.css\");\n// import Thumbnail from \"../Thumbnail\";\n// import { Container, Row, Col } from \"../Grid\";\n\n// Exporting both RecipeList and RecipeListItem from this file\n\n// RecipeList renders a bootstrap list item\nexport function RecipeList({ children }) {\n  return <ul className=\"list-group\">{children}</ul>;\n}\n\n// RecipeListItem renders a bootstrap list item containing data from the recipe api call\nexport function BookListItem(props) {\n  return (\n    <div key={props.identifier} className=\"card\">\n      <div key={props.identifier} className=\"card-header\">\n        <span>{props.title}</span>\n        <div>\n          <a\n            key={props.identifier}\n            href={props.infoLink}\n            class=\"btn btn-primary\"\n          >\n            View\n          </a>\n\n          {/* If the page state is aved, then display delete button. Else, display save button */}\n          <a\n            key={props.identifier}\n            href=\"/\"\n            className=\"btn btn-primary\"\n            data-id={props.identifier}\n          >\n            {props.pageState === \"Saved\" ? \"Delete\" : \"Save\"}\n          </a>\n        </div>\n      </div>\n      <div key={props.identifier} className=\"card-body\">\n        <div key={props.identifier} className=\"row\">\n          <div className=\"col-md-4\">\n            <img\n              src={props.thumbnail}\n              className=\"card-img\"\n              alt={props.title}\n            ></img>\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">\n                {props.title + \" by \" + props.authors}\n              </h5>\n              <p className=\"card-text\">{props.description}</p>\n              <p className=\"card-text\">\n                <small className=\"text-muted\">ISBN: {props.identifier}</small>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// <li className=\"list-group-item\">\n//       <Container>\n//         <Row>\n//           <Col size=\"xs-4 sm-2\">\n//             <Thumbnail src=\"http://img.recipepuppy.com/560556.jpg\" />\n//           </Col>\n//           <Col size=\"xs-8 sm-9\">\n//             <h3>Vegetable-Pasta Oven Omelet</h3>\n//             <p>\n//               Ingredients: \"tomato, onions, red pepper, garlic, olive oil, zucchini, cream cheese,\n//               vermicelli, eggs, parmesan cheese, milk, italian seasoning, salt, black pepper\"\n//             </p>\n//             <a\n//               rel=\"noreferrer noopener\"\n//               target=\"_blank\"\n//               href=\"http://find.myrecipes.com/recipes/recipefinder.dyn?action=displayRecipe&recipe_id=520763\"\n//             >\n//               Go to recipe!\n//             </a>\n//           </Col>\n//         </Row>\n//       </Container>\n//     </li>\n","import React from \"react\";\nimport { BookListItem } from \"../BookList\";\nimport(\"./style.css\");\n// import Thumbnail from \"../Thumbnail\";\n// import { Container, Row, Col } from \"../Grid\";\n\n// RecipeListItem renders a bootstrap list item containing data from the recipe api call\nexport function Results(props) {\n  console.log(\"Results props: \", props);\n  if (props.pageState === \"Saved\") {\n    return (\n      <div>\n        <h3>Saved Books</h3>\n\n        {/* If state variable books has length  */}\n        {props.books.length ? (\n          // Iterate through books array\n          this.state.books.map(function(data) {\n            console.log(data);\n            return (\n              // Create a book list item\n              <BookListItem\n                title={data.title}\n                thumbnail={data.thumbnail}\n                ingredients={data.ingredients}\n                href={data.href}\n              />\n            );\n          })\n        ) : (\n          // Else, provide note that there are no books\n          <h3 className=\"text-center\">No books available!</h3>\n        )}\n      </div>\n    );\n  } else {\n    /* Else if pagestate is something else */\n    return (\n      <div>\n        <h3>Search Results</h3>\n\n        {/* If state variable books has length  */}\n        {props.searchedBooks.length ? (\n          // Iterate through books array\n          props.searchedBooks.map(function(data) {\n            console.log(data.volumeInfo);\n            // Extract required information\n            const { title, infoLink, description } = data.volumeInfo;\n            const thumbnail = data.volumeInfo.imageLinks.thumbnail || \"\";\n            console.log(data.volumeInfo.industryIdentifiers);\n            const identifier = data.volumeInfo.industryIdentifiers[0].identifer;\n            // Join array of authors with commas separating and remove last comma\n            const authors = data.volumeInfo.authors\n              ? data.volumeInfo.authors.join(\", \").substring(0, -2)\n              : \"Anonymous\";\n\n            return (\n              // Create a book list item\n              <BookListItem\n                key={identifier}\n                title={title}\n                infoLink={infoLink}\n                thumbnail={thumbnail}\n                authors={authors}\n                description={description}\n                identifier={identifier}\n                pageState={props.pageState}\n              />\n            );\n          })\n        ) : (\n          // Else, provide note that there are no books\n          <></>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import axios from \"axios\";\n\n// The getRecipes method retrieves recipes from the server\n// It accepts a \"query\" or term to search the recipe api for\nexport default {\n  getBooks: function(titleToSearch) {\n    // let searchQuery =\n    //   \"https://www.googleapis.com/books/v1/volumes?q=\" +\n    //   encodeURIComponent(titleToSearch);\n\n    let searchQuery = \"/api/getBooks/\" + titleToSearch;\n\n    return axios.get(searchQuery);\n  },\n\n  returnSavedBooks: function() {\n    return axios.get(\"/api/savedBooks\");\n  },\n\n  deleteBook: function(idToDelete) {\n    return axios.delete(\"/api/savedBooks/\" + idToDelete);\n  }\n};\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport Results from \"./components/Results\";\nimport API from \"./utils/API\";\n// import { BookListItem } from \"./components/BookList\";\nimport { Container, Row, Col } from \"./components/Grid\";\n\nclass App extends Component {\n  state = {\n    books: [],\n    bookSearch: \"\",\n    page: \"Saved\",\n    searchedBooks: [],\n    userSearchMessage: \"\"\n  };\n\n  handlePageChange = event => {\n    event.preventDefault();\n    // Destructure the name and value properties off of event.target\n    // Update the appropriate state\n    // const { name, value } = event.target;\n    const targetPage = event.target.innerText;\n    console.log(event.target);\n    // console.log(\"name: \", name, \"\\nValue: \", value);\n    // console.log(\"inner\", inner);\n    console.log(\"setting state \\ninnertext\" + targetPage);\n    this.setState({\n      page: targetPage\n    });\n\n    // console.log(\"Current State: \" + this.state.page);\n  };\n\n  handleInputChange = event => {\n    // Destructure the name and value properties off of event.target\n    // Update the appropriate state\n    const { value } = event.target;\n    this.setState({\n      bookSearch: value\n    });\n    console.log(this.state.bookSearch);\n  };\n\n  displayToUserSearchMessage = message => {\n    this.setState({\n      userSearchMessage: message\n    });\n  };\n\n  returnAllSavedBooks = () => {\n    API.returnSavedBooks().then(data => {\n      console.log(data);\n    });\n  };\n\n  deleteBookById = event => {\n    let idToDelete = event.target;\n    console.log(idToDelete);\n\n    // API.deleteBook(idToDelete).then(data => {\n    //   console.log(data);\n    // });\n  };\n\n  componentDidMount = () => {\n    this.returnAllSavedBooks();\n  };\n\n  handleFormSubmit = event => {\n    // When the form is submitted, prevent its default behavior, get recipes update the recipes state\n    console.log(\"Form submitted!\");\n    console.log(\"State:\", this.state);\n    this.displayToUserSearchMessage(\"Searching...\");\n\n    event.preventDefault();\n\n    API.getBooks(this.state.bookSearch)\n      .then(res => {\n        console.log(res);\n        // this.setState({\n        //   searchedBooks: res.data.items,\n        //   userSearchMessage: \"\"\n        // });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          userSearchMessage: \"Search Failed\"\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* Nav */}\n        <Nav handlePageChange={this.handlePageChange} />\n        {/* Jumbotron */}\n        <Jumbotron />\n\n        {/* booksearch container */}\n        <Container>\n          {/* If page state is at search, then display search form */}\n          {this.state.page === \"Search\" ? (\n            <Row>\n              <Col size=\"md-12\">\n                <form>\n                  <Container>\n                    <Row>\n                      <Col size=\"xs-9 sm-10\">\n                        {/* Display user search message if searching */}\n                        <span>{this.state.userSearchMessage}</span>\n                        <Input\n                          name=\"bookSearch\"\n                          value={this.state.bookSearch}\n                          onChange={this.handleInputChange}\n                          placeholder=\"Search For a Book\"\n                        />\n                      </Col>\n                      <Col size=\"xs-3 sm-2\">\n                        <Button\n                          onClick={this.handleFormSubmit}\n                          type=\"success\"\n                          className=\"input-lg\"\n                        >\n                          Search\n                        </Button>\n                      </Col>\n                    </Row>\n                  </Container>\n                </form>\n              </Col>\n            </Row>\n          ) : (\n            // Else return an empty div\n            <></>\n          )}\n\n          {/* Book Results: Show saved books if on saved page, else show search results */}\n\n          <Row>\n            <Col size=\"12\">\n              <Container>\n                {/* Test button to return all saved books */}\n                <Button\n                  onClick={this.returnAllSavedBooks}\n                  type=\"success\"\n                  className=\"input-lg\"\n                >\n                  Update\n                </Button>\n                <Results\n                  pageState={this.state.page}\n                  books={this.state.books}\n                  searchedBooks={this.state.searchedBooks}\n                />\n              </Container>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}